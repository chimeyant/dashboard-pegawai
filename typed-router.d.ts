/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/backend/activity/projectmanager/permohonan': RouteRecordInfo<'/backend/activity/projectmanager/permohonan', '/backend/activity/projectmanager/permohonan', Record<never, never>, Record<never, never>>,
    '/backend/activity/projectmanager/tindaklanjut': RouteRecordInfo<'/backend/activity/projectmanager/tindaklanjut', '/backend/activity/projectmanager/tindaklanjut', Record<never, never>, Record<never, never>>,
    '/backend/activity/tas/report': RouteRecordInfo<'/backend/activity/tas/report', '/backend/activity/tas/report', Record<never, never>, Record<never, never>>,
    '/backend/activity/tas/task': RouteRecordInfo<'/backend/activity/tas/task', '/backend/activity/tas/task', Record<never, never>, Record<never, never>>,
    '/backend/activity/tas/taskdetail': RouteRecordInfo<'/backend/activity/tas/taskdetail', '/backend/activity/tas/taskdetail', Record<never, never>, Record<never, never>>,
    '/backend/activity/user/history': RouteRecordInfo<'/backend/activity/user/history', '/backend/activity/user/history', Record<never, never>, Record<never, never>>,
    '/backend/activity/user/openticket': RouteRecordInfo<'/backend/activity/user/openticket', '/backend/activity/user/openticket', Record<never, never>, Record<never, never>>,
    '/backend/activity/user/permohonan': RouteRecordInfo<'/backend/activity/user/permohonan', '/backend/activity/user/permohonan', Record<never, never>, Record<never, never>>,
    '/backend/dashboard': RouteRecordInfo<'/backend/dashboard', '/backend/dashboard', Record<never, never>, Record<never, never>>,
    '/backend/mainmenu/daftar_pelamar': RouteRecordInfo<'/backend/mainmenu/daftar_pelamar', '/backend/mainmenu/daftar_pelamar', Record<never, never>, Record<never, never>>,
    '/backend/mainmenu/event': RouteRecordInfo<'/backend/mainmenu/event', '/backend/mainmenu/event', Record<never, never>, Record<never, never>>,
    '/backend/mainmenu/event_pelamar': RouteRecordInfo<'/backend/mainmenu/event_pelamar', '/backend/mainmenu/event_pelamar', Record<never, never>, Record<never, never>>,
    '/backend/mainmenu/formasi': RouteRecordInfo<'/backend/mainmenu/formasi', '/backend/mainmenu/formasi', Record<never, never>, Record<never, never>>,
    '/backend/mainmenu/formasi_document': RouteRecordInfo<'/backend/mainmenu/formasi_document', '/backend/mainmenu/formasi_document', Record<never, never>, Record<never, never>>,
    '/backend/mainmenu/verifikasi': RouteRecordInfo<'/backend/mainmenu/verifikasi', '/backend/mainmenu/verifikasi', Record<never, never>, Record<never, never>>,
    '/backend/mainmenu/verifikasi_kabid': RouteRecordInfo<'/backend/mainmenu/verifikasi_kabid', '/backend/mainmenu/verifikasi_kabid', Record<never, never>, Record<never, never>>,
    '/backend/master/appinfo': RouteRecordInfo<'/backend/master/appinfo', '/backend/master/appinfo', Record<never, never>, Record<never, never>>,
    '/backend/master/document_template': RouteRecordInfo<'/backend/master/document_template', '/backend/master/document_template', Record<never, never>, Record<never, never>>,
    '/backend/master/groupservice': RouteRecordInfo<'/backend/master/groupservice', '/backend/master/groupservice', Record<never, never>, Record<never, never>>,
    '/backend/master/jenis_berita_acara_pemeriksaan': RouteRecordInfo<'/backend/master/jenis_berita_acara_pemeriksaan', '/backend/master/jenis_berita_acara_pemeriksaan', Record<never, never>, Record<never, never>>,
    '/backend/master/jenis_informasi_kerugian_daerah': RouteRecordInfo<'/backend/master/jenis_informasi_kerugian_daerah', '/backend/master/jenis_informasi_kerugian_daerah', Record<never, never>, Record<never, never>>,
    '/backend/master/jenis_kerugian': RouteRecordInfo<'/backend/master/jenis_kerugian', '/backend/master/jenis_kerugian', Record<never, never>, Record<never, never>>,
    '/backend/master/section': RouteRecordInfo<'/backend/master/section', '/backend/master/section', Record<never, never>, Record<never, never>>,
    '/backend/master/service': RouteRecordInfo<'/backend/master/service', '/backend/master/service', Record<never, never>, Record<never, never>>,
    '/backend/master/tos': RouteRecordInfo<'/backend/master/tos', '/backend/master/tos', Record<never, never>, Record<never, never>>,
    '/backend/peserta/dashboard': RouteRecordInfo<'/backend/peserta/dashboard', '/backend/peserta/dashboard', Record<never, never>, Record<never, never>>,
    '/backend/peserta/formasi': RouteRecordInfo<'/backend/peserta/formasi', '/backend/peserta/formasi', Record<never, never>, Record<never, never>>,
    '/backend/peserta/identitas': RouteRecordInfo<'/backend/peserta/identitas', '/backend/peserta/identitas', Record<never, never>, Record<never, never>>,
    '/backend/peserta/permohonan': RouteRecordInfo<'/backend/peserta/permohonan', '/backend/peserta/permohonan', Record<never, never>, Record<never, never>>,
    '/backend/sidakuda/initial-data/': RouteRecordInfo<'/backend/sidakuda/initial-data/', '/backend/sidakuda/initial-data', Record<never, never>, Record<never, never>>,
    '/backend/sidakuda/laporan/individual/': RouteRecordInfo<'/backend/sidakuda/laporan/individual/', '/backend/sidakuda/laporan/individual', Record<never, never>, Record<never, never>>,
    '/backend/sidakuda/laporan/rekap/': RouteRecordInfo<'/backend/sidakuda/laporan/rekap/', '/backend/sidakuda/laporan/rekap', Record<never, never>, Record<never, never>>,
    '/backend/sidakuda/skp2k/': RouteRecordInfo<'/backend/sidakuda/skp2k/', '/backend/sidakuda/skp2k', Record<never, never>, Record<never, never>>,
    '/backend/sidakuda/sktjm/': RouteRecordInfo<'/backend/sidakuda/sktjm/', '/backend/sidakuda/sktjm', Record<never, never>, Record<never, never>>,
    '/backend/sidakuda/sts/': RouteRecordInfo<'/backend/sidakuda/sts/', '/backend/sidakuda/sts', Record<never, never>, Record<never, never>>,
    '/backend/sidakuda/surat-penagihan/': RouteRecordInfo<'/backend/sidakuda/surat-penagihan/', '/backend/sidakuda/surat-penagihan', Record<never, never>, Record<never, never>>,
    '/backend/sidakuda/surat-peringatan/': RouteRecordInfo<'/backend/sidakuda/surat-peringatan/', '/backend/sidakuda/surat-peringatan', Record<never, never>, Record<never, never>>,
    '/backend/utility/filemanagement/': RouteRecordInfo<'/backend/utility/filemanagement/', '/backend/utility/filemanagement', Record<never, never>, Record<never, never>>,
    '/backend/utility/user/ChangePassword': RouteRecordInfo<'/backend/utility/user/ChangePassword', '/backend/utility/user/ChangePassword', Record<never, never>, Record<never, never>>,
    '/backend/utility/user/UserManajemen': RouteRecordInfo<'/backend/utility/user/UserManajemen', '/backend/utility/user/UserManajemen', Record<never, never>, Record<never, never>>,
    '/backend/utility/user/UserProfile': RouteRecordInfo<'/backend/utility/user/UserProfile', '/backend/utility/user/UserProfile', Record<never, never>, Record<never, never>>,
    '/frontend/': RouteRecordInfo<'/frontend/', '/frontend', Record<never, never>, Record<never, never>>,
    '/frontend/forgot-password': RouteRecordInfo<'/frontend/forgot-password', '/frontend/forgot-password', Record<never, never>, Record<never, never>>,
    '/frontend/login': RouteRecordInfo<'/frontend/login', '/frontend/login', Record<never, never>, Record<never, never>>,
    '/frontend/register': RouteRecordInfo<'/frontend/register', '/frontend/register', Record<never, never>, Record<never, never>>,
    '/frontend/regsuccess': RouteRecordInfo<'/frontend/regsuccess', '/frontend/regsuccess', Record<never, never>, Record<never, never>>,
    '/frontend/reset-success': RouteRecordInfo<'/frontend/reset-success', '/frontend/reset-success', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
